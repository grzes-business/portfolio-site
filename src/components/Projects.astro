---
import { Image } from 'astro:assets';
import opyleoImg from "../assets/opyleo.png";
import newsletterImg from "../assets/newsletter.jpg";
import videoGuideImg from "../assets/video-guide.jpg";

const projects = [
  {
    title: 'Opyleo Landing Page',
    description: 'Led the development of a mobile landing page for a book selling app, managed the team, consulted with the prospect, thus learned a lot.',
    tags: ['Team Lead', 'Mobile First', 'Landing Page'],
    image: opyleoImg,
    fullDescription: `
      This project is the most influencial for my growth yet I have undertaken, because it learned me how to manage and coordinate work in a team and also I had to understand prospect’s needs and how to communicate efficiently in order to deliver the best results.

      Besides being a leader of the project, I had a significant code contributions to the project.

      To be precise I had implemented:
      • Slide-like scrolling
      • Card’s template (and a lot of width & height responsiveness with it → I almost passed away)
      • Implementation of Swiper.js with the card template and integration with team’s member api calling mechanism
      • Deployment with GitHub Pages
      • Draggable bubbles
    `,
    technologies: ['Astro.js', 'TailwindCSS', 'JavaScript', 'TypeScript', 'GitHub Pages', 'Swiper.js'],
    role: 'Team Lead & Lead Developer',
    duration: '4 months'
  },
  {
    title: 'Newsletter Integration',
    description: 'Created custom newsletter forms with MailerLite integration for collecting leads from new site\'s blog.',
    tags: ['MailerLite', 'Forms', 'Integration'],
    image: newsletterImg,
    fullDescription: `
      I designed and developed two custom forms with custom submitting & error validation script with displayal of custom error messages, and legal page for newsletter's service.

      Creating a custom designed form with MailerLite was not so straightforward. In order to ensure functionality of the form I had to start with the initial MailerLite default’s form HTML and strip it to essential parts for submitting the form. 

      I have created the for a company which code’s is stored on GitLab, so I had to learn how to work in a professional code environment and how to comply with the company’s rules for creating code history.
    `,
    technologies: ['Astro.js', 'TailwindCSS', 'JavaScript', 'MailerLite', 'GitLab'],
    role: 'Frontend Developer',
    duration: '2 weeks'
  },
  {
    title: 'Video Guide Platform',
    description: 'Developed & designed a video guide and a signup page for it.',
    tags: ['Video Platform', 'MailerLite', 'Educational'],
    image: videoGuideImg,
    fullDescription: `
      I designed and developed a completely custom video guide and a custom signup form with processing through MailerLite’s automation.

      I incorporated the Plyr video player for the video on the signup page and for every other video in the guide. The guide’s videos are displayed through a custom modal.

      The hardest part of the job was adding a loading overlay to each video’s thumbnail. While trying to implement it, I stumbled upon navigation tracking, which made things unnecessarily complicated. It turned out it was unnecessary it — I just used the first frame of each video as the video card thumbnail.

      I lost a bit of time on that, but it was a good lesson learned anyways :P
    `,
    technologies: ['Astro.js', 'TailwindCSS', 'JavaScript', 'Plyr.js', 'MailerLite', 'Responsive Design'],
    role: 'Frontend Developer',
    duration: '1.5 months'
  }
];
---

<section id="projects" class="min-h-screen py-20 px-4 bg-zinc-900/50">
  <div class="max-w-6xl mx-auto">
    <h2 class="text-4xl font-bold text-center mb-16">Featured Work</h2>
    
    <div id="project-list" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {projects.map((project, index) => (
        <div 
          class="group bg-zinc-800/50 rounded-xl overflow-hidden transition-all duration-300 cursor-pointer border border-transparent hover:border-purple-500/30 hover:shadow-lg hover:shadow-blue-500/20 hover:-translate-y-2"
        >
          <div class="relative overflow-hidden">
            <Image src={project.image} alt={project.title} class="w-full h-48 object-cover transition-transform duration-500 group-hover:scale-105" />
            <div class="absolute inset-0 bg-gradient-to-t from-zinc-900/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end justify-center pb-4">
              <span class="text-sm font-medium text-white px-4 py-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 backdrop-blur-sm transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                View
              </span>
            </div>
          </div>
          <div class="p-6 flex justify-between flex-col">
            <h3 class="text-xl font-medium mb-3 group-hover:bg-gradient-to-r group-hover:from-blue-500 group-hover:to-purple-500 group-hover:text-transparent group-hover:bg-clip-text transition-all duration-300">{project.title}</h3>
            <p class="text-zinc-400 mb-4">{project.description}</p>
            <div class="flex flex-wrap gap-2">
              {project.tags.map(tag => (
                <span class="px-3 py-1 bg-zinc-700/50 rounded-full text-sm text-zinc-300 transition-colors duration-300 group-hover:bg-zinc-700">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  <!-- Project Modal -->
  <div id="project-modals">
  {projects.map((project, index) => (
    <div
      class="fixed inset-0 flex items-center justify-center p-4 z-50 bg-black/60 backdrop-blur-sm opacity-0 transition-all duration-300"
    >
      <div class="modal-content bg-zinc-900/90 backdrop-blur-md rounded-lg max-w-2xl w-full scale-95 opacity-0 max-h-[80vh] transition-all duration-300 shadow-xl border border-zinc-700/50 overflow-y-auto scrollbar-hide relative">
        <!-- Header area with sticky close button -->
        <div class="sticky top-0 z-10 bg-zinc-900/90 backdrop-blur-md pt-8 pb-4 px-8">
          <div class="flex justify-between items-start">
            <h3 class="text-2xl font-bold">{project.title}</h3>
            <button 
              class="project-close-btn text-zinc-400 hover:text-white -mt-2 -mr-2 p-1"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Content area -->
        <div class="p-8 pt-0">
          <Image src={project.image} alt={project.title} class="aspect-[3/2] w-full object-cover rounded-lg mb-6" />
          
          <div class="space-y-4">
            <div>
              <h4 class="text-lg font-semibold mb-2">Project Overview</h4>
              <p class="text-zinc-400 whitespace-pre-line">{project.fullDescription}</p>
            </div>
            
            <div>
              <h4 class="text-lg font-semibold mb-2">Technologies Used</h4>
              <div class="flex flex-wrap gap-2">
                {project.technologies.map(tech => (
                  <span class="px-3 py-1 bg-zinc-800 rounded-full text-sm text-zinc-300">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div>
                <h4 class="text-lg font-semibold mb-2">Role</h4>
                <p class="text-zinc-400">{project.role}</p>
              </div>
              <div>
                <h4 class="text-lg font-semibold mb-2">Duration</h4>
                <p class="text-zinc-400">{project.duration}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ))}
  </div>
  <script>
    function initialiseScript() {
      const modalsContainer = document.getElementById('project-modals');
      const projectList = document.getElementById('project-list');  
      if (modalsContainer && projectList) {
        Array.from(modalsContainer.children).forEach(modal => {
          // Hide all modals initially
          modal.classList.add('hidden', 'opacity-0');
          
          // Find the modal content div (first child of the modal)

          const modalContent = modal.querySelector('.modal-content');

          // Find the close button in each modal and add click event
          const closeButton = modal.querySelector('button');
          if (closeButton) {
            closeButton.addEventListener('click', () => {
              closeModal(modal, modalContent);
            });
          }
        });

        // Function to open modal with animation
        const openModal = (modal: any, modalContent: any) => {
          
          document.documentElement.classList.add('overflow-hidden');

          // First remove hidden class
          modal.classList.remove('hidden');
          modalContent.classList.remove('hidden');
          
          // Force browser reflow
          void modal.offsetWidth;
          
          // Then add visible classes
          modal.classList.add('opacity-100');
          modal.classList.remove('opacity-0');
          
          if (modalContent) {
            modalContent.classList.add('scale-100', 'opacity-100');
            modalContent.classList.remove('scale-95', 'opacity-0');
          }
          
          // Prevent body scrolling
          document.body.style.overflow = 'hidden';
        };

        // Function to close modal with animation
        const closeModal = (modal: any, modalContent: any) => {

          document.documentElement.classList.remove('overflow-hidden');

          // First remove visible classes
          modal.classList.remove('opacity-100');
          modal.classList.add('opacity-0');
          
          if (modalContent) {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
          }
          
          // Wait for transition to complete before hiding
          modal.addEventListener('transitionend', function hideModal() {
            modal.classList.add('hidden');
            modalContent.classList.add('hidden');
            document.body.style.overflow = '';
            modal.removeEventListener('transitionend', hideModal);
          }, {once: true});
        };

        // Add click event to each project
        Array.from(projectList.children).forEach((project, index) => {
          project.addEventListener('click', () => {
            const modal = modalsContainer.children[index];
            const modalContent = modal.querySelector('.modal-content');
            if (modal && modalContent) {
              openModal(modal, modalContent);
            }
          });
        });

        // Close modal when clicking outside (on the background)
        document.addEventListener('click', (event) => {
          Array.from(modalsContainer.children).forEach(modal => {
            const modalContent = modal.querySelector('.modal-content');
            if (event.target === modal && !modal.classList.contains('hidden')) {
              closeModal(modal, modalContent);
            }
          });
        });

        // Close modal when pressing Escape key
        document.addEventListener('keydown', (event) => {
          if (event.key === 'Escape') {
            const visibleModal = Array.from(modalsContainer.children).find(
          modal => !modal.classList.contains('hidden')
            );
            const modalContent = visibleModal?.querySelector('.modal-content');
            if (visibleModal) {
              closeModal(visibleModal, modalContent);
            }
          }
        });
      }
    }

    document.addEventListener('DOMContentLoaded', () => {initialiseScript();});
  </script>
</section>